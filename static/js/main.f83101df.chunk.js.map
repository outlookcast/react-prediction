{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","URL_API_BASE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange1","event","setState","fomr1","target","value","handleClick","console","log","state","method","url","concat","responseType","then","response","comentarioResponse","data","comentario","resultadoResponse","predicao","probabilidadeResponse","probabilidade","toFixed","handleOpen","handleClose","openModalResponse","form2","valor","react_default","a","createElement","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","className","style","margin","Card","width","CardContent","Typography","variant","component","Input","onChange","Button","onClick","marginTop","color","renderModal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0VAcMA,EAAQC,EAAQ,IAEhBC,EAAe,6DAyGNC,cAtGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,cAAgB,SAACC,GACfR,EAAKS,SAAS,CACZC,MAAOF,EAAMG,OAAOC,SAhBLZ,EAoBnBa,YAAc,WACZC,QAAQC,IAAIf,EAAKgB,MAAMN,OACvBf,EAAM,CACJsB,OAAQ,MACRC,IAAKrB,EAAe,kBAAf,eAAAsB,OAAkDnB,EAAKgB,MAAMN,OAClEU,aAAc,WAEbC,KAAK,SAACC,GAELtB,EAAKS,SAAS,CACZc,mBAAoBD,EAASE,KAAKC,WAClCC,kBAAmBJ,EAASE,KAAKG,SAAW,WAAY,WACxDC,uBAAsD,IAA9BN,EAASE,KAAKK,eAAqBC,QAAQ,GAAK,KAExE,WACA9B,EAAK+B,kBAnCM/B,EAyCnBgC,YAAc,WACZhC,EAAKS,SAAS,CACZwB,mBAAmB,KA3CJjC,EA+CnB+B,WAAa,WACX/B,EAAKS,SAAS,CACZwB,mBAAmB,KA9CrBjC,EAAKgB,MAAQ,CACXN,MAAO,GACPwB,MAAO,GACPC,OAAO,EACPF,mBAAmB,EACnBV,mBAAoB,GACpBK,sBAAuB,KACvBF,kBAAmB,MAVJ1B,6EAsDjB,OACEoC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,KAAMrC,KAAKa,MAAMiB,kBACjBQ,QAAStC,KAAK6B,YACdU,kBAAgB,qBAChBC,mBAAiB,4BAEjBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaC,GAAG,sBAAhB,+BACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAmBF,GAAG,4BAAtB,kBACe1C,KAAKa,MAAMO,mBACxBa,EAAAC,EAAAC,cAAA,WAFF,oBAGcnC,KAAKa,MAAMU,kBACvBU,EAAAC,EAAAC,cAAA,WAJF,kBAKkBnC,KAAKa,MAAMY,0DASnC,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAChBZ,EAAAC,EAAAC,cAAA,MAAIW,MAAO,CAAEC,OAAQ,MAArB,mBACAd,EAAAC,EAAAC,cAAA,0FACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMF,MAAO,CAAEG,MAAO,UACpBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,wBAGApB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KAAtC,qCAEApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAO7C,MAAOT,KAAKa,MAAMN,MAAOgD,SAAUvD,KAAKI,cAAe0C,MAAO,CAAEG,MAAO,UAC5EhB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQC,QAASzD,KAAKU,YAAaoC,MAAO,CAAEY,UAAW,QAAUN,QAAQ,YAAYO,MAAM,aAA3F,cAMP3D,KAAK4D,sBAjGIC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.f83101df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Input } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst axios = require('axios');\n\nconst URL_API_BASE = 'https://analisenoticiasapi20190803054511.azurewebsites.net';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fomr1: '',\n      form2: '',\n      valor: false,\n      openModalResponse: false,\n      comentarioResponse: '',\n      probabilidadeResponse: null,\n      resultadoResponse: null\n    }\n  }\n\n  handleChange1 = (event) => {\n    this.setState({\n      fomr1: event.target.value,\n    });\n  };\n\n  handleClick = () => {\n    console.log(this.state.fomr1);\n    axios({\n      method: 'get',\n      url: URL_API_BASE + '/api/Prediction' + `?comentario=${this.state.fomr1}`,\n      responseType: 'stream'\n    })\n      .then((response) => {\n        \n        this.setState({\n          comentarioResponse: response.data.comentario,\n          resultadoResponse: response.data.predicao ? 'POSITIVA': 'NEGATIVA',\n          probabilidadeResponse: (response.data.probabilidade * 100).toFixed(2) + '%'\n        }\n        , () => {\n          this.handleOpen();\n        });\n\n      });\n  };\n\n  handleClose = () => {\n    this.setState({\n      openModalResponse: false\n    })\n  };\n\n  handleOpen = () => {\n    this.setState({\n      openModalResponse: true\n    })\n  };\n\n  renderModal() {\n    return (\n      <Dialog\n        open={this.state.openModalResponse}\n        onClose={this.handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Resultado da predição</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Comentário: {this.state.comentarioResponse}\n            <br />\n            Notícia é: {this.state.resultadoResponse}\n            <br />\n            Probabilidade: {this.state.probabilidadeResponse}\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <h5 style={{ margin: '0' }}>Predições</h5>\n          <h6>Aplicativo para tentar prever se uma notícia é positiva ou negativa :)</h6>\n          <Card style={{ width: '300px' }}>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\">\n                Obter Predição\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\">\n                Digite um título de notícia:\n              <Input value={this.state.fomr1} onChange={this.handleChange1} style={{ width: '100%' }} />\n                <Button onClick={this.handleClick} style={{ marginTop: '30px' }} variant=\"contained\" color=\"secondary\">Enviar</Button>\n              </Typography>\n            </CardContent>\n          </Card>\n        </header>\n\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}